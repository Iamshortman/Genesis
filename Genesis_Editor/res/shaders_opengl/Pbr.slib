const float PI = 3.14159265359;

float DistributionGGX(float norm_dot_half, float alpha_roughness)
{
	float alpha_roughness_sq = alpha_roughness * alpha_roughness;
	float f = (norm_dot_half * alpha_roughness_sq - norm_dot_half) * norm_dot_half + 1.0;
	return alpha_roughness_sq / (PI * f * f);	
};

float GeometrySchlickGGX2(float dot, float r)
{
	return 2.0 * dot / (dot + sqrt(r * r + (1.0 - r * r) * (dot * dot)));
}

float GeometrySmith(float norm_dot_cam, float norm_dot_light, float alpha_roughness)
{
    float ggx2  = GeometrySchlickGGX2(norm_dot_cam, alpha_roughness);
    float ggx1  = GeometrySchlickGGX2(norm_dot_light, alpha_roughness);
    return ggx1 * ggx2;
};

vec3 specularReflection(vec3 specular_environment_r0, vec3 specular_environment_r90, float view_dot_half)
{
	return specular_environment_r0 + (specular_environment_r90 - specular_environment_r0) * pow(clamp(1.0 - view_dot_half, 0.0, 1.0), 5.0);
}

struct PbrMaterial
{
	vec3 albedo;
	float metallic;
	float roughness;
	float alpha_roughness;
};

vec3 calcDirectLight(PbrMaterial material, vec3 frag_normal, vec3 frag_to_cam_dir, vec3 frag_to_light_dir, vec3 radiance)
{
	vec3 specular_color  = mix(vec3(0.04), material.albedo, material.metallic);
	float reflectance = max(max(specular_color.r, specular_color.g), specular_color.b);
	float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
	vec3 specular_environment_r0 = specular_color.rgb;
	vec3 specular_environment_r90 = vec3(1.0, 1.0, 1.0) * reflectance90;

	vec3 half_vector = normalize(frag_to_cam_dir + frag_to_light_dir);
	
	//All dot products
	float norm_dot_light = clamp(dot(frag_normal, frag_to_light_dir), 0.001, 1.0);
    float norm_dot_cam   = clamp(abs(dot(frag_normal, frag_to_cam_dir)), 0.001, 1.0);
	float norm_dot_half  = clamp(dot(frag_normal, half_vector), 0.0, 1.0);
	//float light_dot_half = clamp(dot(frag_to_light_dir, half_vector), 0.0, 1.0);
	float cam_dot_half   = clamp(dot(frag_to_cam_dir, half_vector), 0.0, 1.0);
		
	// cook-torrance brdf
	vec3 F = specularReflection(specular_environment_r0, specular_environment_r90, cam_dot_half);
	float D = DistributionGGX(norm_dot_half, material.alpha_roughness); // Microfacet Distribution        
	float G = GeometrySmith(norm_dot_cam, norm_dot_light, material.alpha_roughness); //Geometric Occlusion

	vec3 diffuse = ((vec3(1.0) - specular_color) * (1.0 - material.metallic) * material.albedo) / PI;
	vec3 specular = (F * D * G) / (4.0 * norm_dot_cam * norm_dot_light);
	
	return norm_dot_light * radiance * (diffuse + specular);
};