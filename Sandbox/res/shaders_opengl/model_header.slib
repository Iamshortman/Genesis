#version 450

//Lighting Functions
struct BaseLight
{
    vec3 color;
    float intensity;
};

struct DirectionalLight
{
	BaseLight base;
	vec3 direction;
};

struct PointLight
{
    BaseLight base;
	float range;
    vec2 attenuation;
	vec3 position;
};

struct SpotLight
{
    PointLight point;
    vec3 direction;
    float cutoff;
};

vec4 CalcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPos)
{
    float diffuseFactor = dot(normal, -direction);
    
    vec4 diffuseColor = vec4(0.0, 0.0, 0.0, 0.0);
    
    if(diffuseFactor > 0.0)
    {
        diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
    }
    
    return diffuseColor;
}


vec4 CalcDirectionalLight(DirectionalLight directional, vec3 normal, vec3 worldPos)
{
    return CalcLight(directional.base, directional.direction, normal, worldPos);
}

vec4 CalcPointLight(PointLight point, vec3 normal, vec3 worldPos)
{
    vec3 lightDirection = worldPos - point.position;
    float distanceToPoint = length(lightDirection);
    
    if(distanceToPoint > point.range)
        return vec4(0.0, 0.0, 0.0, 0.0);
    
    lightDirection = normalize(lightDirection);
    
    vec4 color = CalcLight(point.base, lightDirection, normal, worldPos);
    
	float distance_delta = distanceToPoint / point.range;
	
    float attenuation_value = (point.attenuation.x * distance_delta) + //Linear
                        (point.attenuation.y * distance_delta * distance_delta) + //Quadratic 
                        0.0001; 
	
    return color / attenuation_value;
}

vec4 CalcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPos)
{
    vec3 lightDirection = normalize(worldPos - spotLight.point.position);
    float spotFactor = dot(lightDirection, spotLight.direction);
    
    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
    
    if(spotFactor > spotLight.cutoff)
    {
        color = CalcPointLight(spotLight.point, normal, worldPos) *
                (1.0 - (1.0 - spotFactor)/(1.0 - spotLight.cutoff));
    }
    
    return color;
}

float CalcShadow(sampler2D shadow_map, vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = ((fragPosLightSpace.xyz / fragPosLightSpace.w) * 0.5) + 0.5;

	float currentDepth = projCoords.z;
	float closestDepth = (texture2D(shadow_map, projCoords.xy).r * 0.5) + 0.5;
	
	float bias = 0.00004;
	float shadow = currentDepth + bias > closestDepth  ? 1.0 : 0.0;   

    return shadow;
}

//Shader Header
layout(location = 0) in vec3 frag_world_pos;
layout(location = 1) in vec2 frag_uv;
layout(location = 2) in mat3 frag_tangent_space;

struct Environment
{
	vec3 camera_position;
	vec3 ambient_light;
	mat4 view_projection_matrix;
};
uniform Environment environment;

struct Material
{
	vec4 albedo;
	vec4 pbr_values;
};
uniform Material material;
uniform sampler2D material_textures[8];